{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.js"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nexport function middleware(request) {\n  console.log('Middleware exécuté pour:', request.nextUrl.pathname);\n  \n  // Selon les souhaits du client, les routes \"/services\" et \"/dashboard\" doivent être accessibles sans authentification\n  // Seules les routes \"/orders\" et \"/profile\" doivent être protégées\n  // Cependant, le tableau de bord administrateur doit être réservé aux administrateurs\n  \n  // Vérifier si l'URL demandée commence par /dashboard/admin\n  // Cette route sera réservée aux administrateurs\n  if (request.nextUrl.pathname.startsWith('/dashboard/admin')) {\n    // Vérifier l'authentification via les cookies ou localStorage\n    const token = request.cookies.get('token')?.value || \n                 request.headers.get('authorization')?.split(' ')[1];\n    \n    // Si pas de token, rediriger vers la page de connexion admin\n    if (!token) {\n      console.log('Pas de token, redirection vers /admin/login');\n      return NextResponse.redirect(new URL('/admin/login', request.url));\n    }\n    \n    // Vérifier le rôle via les cookies\n    const userCookie = request.cookies.get('user')?.value;\n    if (userCookie) {\n      try {\n        const userData = JSON.parse(userCookie);\n        if (userData.role !== 'admin') {\n          console.log('Utilisateur non admin, redirection vers /admin/login');\n          return NextResponse.redirect(new URL('/admin/login', request.url));\n        }\n      } catch (error) {\n        console.log('Erreur parsing user cookie, redirection vers /admin/login');\n        return NextResponse.redirect(new URL('/admin/login', request.url));\n      }\n    }\n  }\n  \n  // Vérifier si l'URL demandée commence par /orders ou /profile\n  // Ces routes sont protégées pour tous les utilisateurs connectés\n  if (request.nextUrl.pathname.startsWith('/orders') || request.nextUrl.pathname.startsWith('/profile')) {\n    const token = request.cookies.get('token')?.value || \n                 request.headers.get('authorization')?.split(' ')[1];\n    \n    // Si pas de token, rediriger vers la page de connexion\n    if (!token) {\n      return NextResponse.redirect(new URL('/auth/login', request.url));\n    }\n  }\n  \n  // Continuer la requête normalement pour toutes les autres routes\n  return NextResponse.next();\n}\n\n// Configurer le middleware pour s'exécuter uniquement sur les routes spécifiées\nexport const config = {\n  matcher: ['/dashboard/admin/:path*', '/orders/:path*', '/profile/:path*']\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,SAAS,WAAW,OAAO;IAChC,QAAQ,GAAG,CAAC,4BAA4B,QAAQ,OAAO,CAAC,QAAQ;IAEhE,sHAAsH;IACtH,mEAAmE;IACnE,qFAAqF;IAErF,2DAA2D;IAC3D,gDAAgD;IAChD,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,qBAAqB;QAC3D,8DAA8D;QAC9D,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU,SAC/B,QAAQ,OAAO,CAAC,GAAG,CAAC,kBAAkB,MAAM,IAAI,CAAC,EAAE;QAEhE,6DAA6D;QAC7D,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,gBAAgB,QAAQ,GAAG;QAClE;QAEA,mCAAmC;QACnC,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC,SAAS;QAChD,IAAI,YAAY;YACd,IAAI;gBACF,MAAM,WAAW,KAAK,KAAK,CAAC;gBAC5B,IAAI,SAAS,IAAI,KAAK,SAAS;oBAC7B,QAAQ,GAAG,CAAC;oBACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,gBAAgB,QAAQ,GAAG;gBAClE;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,GAAG,CAAC;gBACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,gBAAgB,QAAQ,GAAG;YAClE;QACF;IACF;IAEA,8DAA8D;IAC9D,iEAAiE;IACjE,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa;QACrG,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU,SAC/B,QAAQ,OAAO,CAAC,GAAG,CAAC,kBAAkB,MAAM,IAAI,CAAC,EAAE;QAEhE,uDAAuD;QACvD,IAAI,CAAC,OAAO;YACV,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,QAAQ,GAAG;QACjE;IACF;IAEA,iEAAiE;IACjE,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAA2B;QAAkB;KAAkB;AAC3E"}}]
}